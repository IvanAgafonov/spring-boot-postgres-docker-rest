/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.bookstore.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import ru.bookstore.model.Book;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-08T15:10:05.181404+03:00[Europe/Moscow]")
@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /books/{id} : delete one book
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or Not Modified (status code 304)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "delete one book", nickname = "deleteBooksId", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 304, message = "Not Modified"),
        @ApiResponse(code = 404, message = "Not Found") })
    @DeleteMapping(
        value = "/books/{id}"
    )
    default ResponseEntity<Void> deleteBooksId(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books : All books
     * list books
     *
     * @return OK (status code 200)
     */
    @ApiOperation(value = "All books", nickname = "getBooks", notes = "list books", response = Book.class, responseContainer = "List", tags={ "book", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class, responseContainer = "List") })
    @GetMapping(
        value = "/books",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Book>> getBooks() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/{id} : one book
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "one book", nickname = "getBooksId", notes = "", response = Book.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Book.class),
        @ApiResponse(code = 404, message = "Not Found") })
    @GetMapping(
        value = "/books/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Book> getBooksId(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /books
     *
     * @param book  (optional)
     * @return Created (status code 201)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "", nickname = "postBooks", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @PostMapping(
        value = "/books",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> postBooks(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Book book) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /books/{id} : update one book
     *
     * @param id  (required)
     * @param book  (optional)
     * @return OK (status code 200)
     *         or Not Modified (status code 304)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "update one book", nickname = "putBooksId", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 304, message = "Not Modified"),
        @ApiResponse(code = 404, message = "Not Found") })
    @PutMapping(
        value = "/books/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putBooksId(@ApiParam(value = "",required=true) @PathVariable("id") Integer id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Book book) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
